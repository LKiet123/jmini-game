import React, { useState, useEffect } from 'react';
// import "./games/MemoryGame/MemoryGame.css";
import './MemoryGame.css';

// Danh s√°ch h√¨nh ·∫£nh c√≥ th·ªÉ s·ª≠ d·ª•ng
const imagePairs = [
  'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº',
  'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî',
  'üêß', 'üê¶', 'üê§', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫',
  'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû'
];

const MemoryGame = () => {
  const [level, setLevel] = useState(1); // 1: 8 th·∫ª, 2: 16 th·∫ª, 3: 32 th·∫ª
  const [cards, setCards] = useState([]);
  const [flippedCards, setFlippedCards] = useState([]);
  const [moves, setMoves] = useState(0);
  const [gameComplete, setGameComplete] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);

  // Kh·ªüi t·∫°o game d·ª±a tr√™n c·∫•p ƒë·ªô
  const initializeGame = (selectedLevel) => {
    let pairsCount;
    switch (selectedLevel) {
      case 1: pairsCount = 4; break;
      case 2: pairsCount = 8; break;
      case 3: pairsCount = 16; break;
      default: pairsCount = 4;
    }

    // Ch·ªçn ng·∫´u nhi√™n c√°c c·∫∑p h√¨nh ·∫£nh
    const selectedImages = [...imagePairs].sort(() => 0.5 - Math.random()).slice(0, pairsCount);
    const cardPairs = [...selectedImages, ...selectedImages];
    
    // T·∫°o m·∫£ng th·∫ª b√†i
    const initialCards = cardPairs
      .sort(() => Math.random() - 0.5)
      .map((value, index) => ({
        id: index,
        value,
        flipped: false,
        matched: false
      }));

    setCards(initialCards);
    setFlippedCards([]);
    setMoves(0);
    setGameComplete(false);
    setGameStarted(true);
  };

  // Ki·ªÉm tra khi c√≥ 2 th·∫ª ƒë∆∞·ª£c l·∫≠t
  useEffect(() => {
    if (flippedCards.length === 2) {
      setMoves(prev => prev + 1);
      
      const [first, second] = flippedCards;
      if (cards[first].value === cards[second].value) {
        // Kh·ªõp nhau
        setCards(prev =>
          prev.map((card, i) =>
            i === first || i === second ? { ...card, matched: true } : card
          )
        );

        // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh game ch∆∞a
        setTimeout(() => {
          if (cards.every(card => card.matched || [first, second].includes(card.id))) {
            setGameComplete(true);
          }
        }, 500);
      } else {
        // Kh√¥ng kh·ªõp - l·∫≠t l·∫°i sau 1 gi√¢y
        setTimeout(() => {
          setCards(prev =>
            prev.map((card, i) =>
              i === first || i === second ? { ...card, flipped: false } : card
            )
          );
        }, 800);
      }
      
      setFlippedCards([]);
    }
  }, [flippedCards, cards]);

  // X·ª≠ l√Ω khi click v√†o th·∫ª
  const handleCardClick = (index) => {
    if (!gameStarted || gameComplete) return;
    if (flippedCards.length >= 2 || cards[index].flipped || cards[index].matched) return;

    setCards(prev =>
      prev.map((card, i) => (i === index ? { ...card, flipped: true } : card))
    );
    setFlippedCards(prev => [...prev, index]);
  };

  // Reset game
  const resetGame = () => {
    initializeGame(level);
  };

  // Thay ƒë·ªïi c·∫•p ƒë·ªô
  const changeLevel = (newLevel) => {
    setLevel(newLevel);
    setGameStarted(false);
  };

  // T√≠nh to√°n s·ªë c·ªôt cho grid d·ª±a tr√™n c·∫•p ƒë·ªô
  const getGridColumns = () => {
    switch (level) {
      case 1: return 4;
      case 2: return 8;
      case 3: return 8;
      default: return 4;
    }
  };

  return (
    <div className="game">
      <h1>Memory Game</h1>
      
      {!gameStarted ? (
        <div className="level-selection">
          <h2>Ch·ªçn c·∫•p ƒë·ªô</h2>
          <div className="level-options">
            <button 
              className={`level-btn ${level === 1 ? 'active' : ''}`} 
              onClick={() => changeLevel(1)}
            >
              D·ªÖ (8 th·∫ª)
            </button>
            <button 
              className={`level-btn ${level === 2 ? 'active' : ''}`} 
              onClick={() => changeLevel(2)}
            >
              Trung b√¨nh (16 th·∫ª)
            </button>
            <button 
              className={`level-btn ${level === 3 ? 'active' : ''}`} 
              onClick={() => changeLevel(3)}
            >
              Kh√≥ (32 th·∫ª)
            </button>
          </div>
          <button onClick={() => initializeGame(level)} className="start-btn">
            B·∫Øt ƒë·∫ßu
          </button>
        </div>
      ) : (
        <>
          <div className="game-info">
            <div className="moves">L∆∞·ª£t ch∆°i: {moves}</div>
            <div className="level">C·∫•p ƒë·ªô: {['D·ªÖ', 'Trung b√¨nh', 'Kh√≥'][level - 1]}</div>
          </div>
          
          <div 
            className={`card-grid level-${level}`} 
            style={{ gridTemplateColumns: `repeat(${getGridColumns()}, 1fr)` }}
          >
            {cards.map((card, index) => (
              <div
                key={card.id}
                className={`card ${card.flipped || card.matched ? 'flipped' : ''} ${card.matched ? 'matched' : ''}`}
                onClick={() => handleCardClick(index)}
              >
                <div className="card-back">‚ù§</div>
                <div className="card-front">{card.value}</div>
              </div>
            ))}
          </div>
          
          <div className="game-controls">
            <button onClick={resetGame} className="reset-btn">
              Ch∆°i l·∫°i
            </button>
            <button 
              onClick={() => setGameStarted(false)} 
              className="change-level-btn"
            >
              ƒê·ªïi c·∫•p ƒë·ªô
            </button>
          </div>
          
          {gameComplete && (
            <div className="completion-message">
              <h2>Ch√∫c m·ª´ng!</h2>
              <p>B·∫°n ƒë√£ ho√†n th√†nh v·ªõi {moves} l∆∞·ª£t ch∆°i!</p>
              <button onClick={resetGame} className="play-again-btn">
                Ch∆°i l·∫°i
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default MemoryGame;