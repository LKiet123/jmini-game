 import React, { useState } from "react";
// import "./games/TicTacToe/TicTacToe.css";
import "./TicTacToe.css";  

const TicTacToe = () => {

  const [boardSize, setBoardSize] = useState(3); // K√≠ch th∆∞·ªõc b·∫£ng
  const [board, setBoard] = useState(Array(9).fill(null));  
  const [xIsNext, setXIsNext] = useState(true); 
  const [gameStarted, setGameStarted] = useState(false);  
  const [playerA, setPlayerA] = useState("X");  
  const [playerB, setPlayerB] = useState("O");  

   const winnerUser = (squares) => {
    const size = boardSize;
    const winCondition = size < 5 ? 3 : 5; // V·ªõi b·∫£ng nh·ªè th√¨ ch·ªâ c·∫ßn 3 √¥ li√™n ti·∫øp ƒë·ªÉ th·∫Øng

    // L·∫∑p qua t·ª´ng h√†ng c·ªßa b·∫£ng ch∆°i
    for (let row = 0; row < size; row++) {
      for (let col = 0; col <= size - winCondition; col++) {
        const value = squares[row * size + col]; // L·∫•y gi√° tr·ªã c·ªßa √¥ hi·ªán t·∫°i
        if (!value) continue;

        let win = true;
        for (let i = 1; i < winCondition; i++) {
          // Ki·ªÉm tra c√°c √¥ ti·∫øp theo trong c√πng h√†ng
          if (squares[row * size + col + i] !== value) {
            win = false;
            break; // Tho√°t kh·ªèi v√≤ng l·∫∑p
          }
        }
        if (win) return value; // tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa ng∆∞·ªùi th·∫Øng cu·ªôc n·∫øu t√¨m th·∫•y chu·ªói chi·∫øn th·∫Øng
      }
    }

    // Kiem tra cot doc
    for (let col = 0; col < size; col++) {
      for (let row = 0; row <= size - winCondition; row++) {
        const value = squares[row * size + col];
        if (!value) continue;

        let win = true;
        for (let i = 1; i < winCondition; i++) {
          // Neu mot o trong chuoi khong trung gia tri, khong co chien thang
          if (squares[(row + i) * size + col] !== value) {
            win = false;
            break; // Thoat vong lap neu gap o khong hop le
          }
        }

        if (win) return value; // Neu tim thay chuoi hop le, tra ve gia tri thang ("X" hoac "O")
      }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o ch√≠nh
    for (let row = 0; row <= size - winCondition; row++) {
      for (let col = 0; col <= size - winCondition; col++) {
        // L·∫•y gi√° tr·ªã t·∫°i √¥ xu·∫•t ph√°t c·ªßa ƒë∆∞·ªùng ch√©o
        const value = squares[row * size + col];
        if (!value) continue;

        let win = true;
        for (let i = 1; i < winCondition; i++) {
          if (squares[(row + i) * size + col + i] !== value) {
            win = false;
            break;
          }
        }
        if (win) return value;
      }
    }

    // Ki·ªÉm tra ƒë∆∞·ªùng ch√©o ph·ª•
    for (let row = 0; row <= size - winCondition; row++) {
      for (let col = winCondition - 1; col < size; col++) {
        // L·∫•y gi√° tr·ªã t·∫°i √¥ xu·∫•t ph√°t c·ªßa ƒë∆∞·ªùng ch√©o ph·ª•
        const value = squares[row * size + col];
        if (!value) continue;

        let win = true;
        for (let i = 1; i < winCondition; i++) {
          if (squares[(row + i) * size + col - i] !== value) {
            win = false;
            break;
          }
        }
        if (win) return value;
      }
    }

    return null; // Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng
  };

  // X·ª≠ l√Ω khi click v√†o √¥  
  const handleClick = (i) => {
    if (!gameStarted) return; // Kh√¥ng l√†m g√¨ n·∫øu game ch∆∞a b·∫Øt ƒë·∫ßu

    const squares = [...board]; // T·∫°o b·∫£n sao c·ªßa board
    if (winnerUser(squares) || squares[i]) return; // N·∫øu ƒë√£ th·∫Øng ho·∫∑c √¥ ƒë√£ ƒë∆∞·ª£c ch·ªçn

    squares[i] = xIsNext ? "X" : "O"; // G√°n gi√° tr·ªã X ho·∫∑c O
    setBoard(squares); // C·∫≠p nh·∫≠t board
    setXIsNext(!xIsNext); // ƒê·ªïi l∆∞·ª£t ch∆°i
  };

  const renderSquare = (i) => (
  <button
    className={`square ${board[i] ? (board[i] === "X" ? "x" : "o") : ""}`}
    onClick={() => handleClick(i)}
  >
    {board[i] ?? ""}
  </button>
);

  // B·∫Øt ƒë·∫ßu tr√≤ ch∆°i
  const startGame = () => {
    setBoard(Array(boardSize * boardSize).fill(null)); // Reset l·∫°i b√†n c·ªù
    setXIsNext(true); // Reset l∆∞·ª£t
    setGameStarted(true); // B·∫Øt ƒë·∫ßu game
  };

  // Ch∆°i l·∫°i tr√≤ ch∆°i nh∆∞ng gi·ªØ nguy√™n ng∆∞·ªùi ch∆°i v√† k√≠ch th∆∞·ªõc
  const resetGame = () => {
    setBoard(Array(boardSize * boardSize).fill(null));
    setXIsNext(true);
  };

  // Thay ƒë·ªïi k√≠ch th∆∞·ªõc b·∫£ng v√† quay l·∫°i m√†n thi·∫øt l·∫≠p
  const changeBoardSize = (size) => {
    setBoardSize(size);
    setGameStarted(false);
  };

  // X√°c ƒë·ªãnh tr·∫°ng th√°i tr√≤ ch∆°i
  const winner = winnerUser(board);
  let status;
  if (winner) {
    status = `üéâCh√∫c m·ª´ng ${winner === "X" ? playerA : playerB} ƒë√£ chi·∫øn th·∫ØngüèÜ`;
  } else if (board.every((square) => square !== null)) {
    status = "H√≤aü§ù! Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng";
  } else {
    status = `L∆∞·ª£t ti·∫øp theo: ${xIsNext ? playerA : playerB}`;
  }

  // T·∫°o b√†n c·ªù theo boardSize
  const renderBoard = () => {
    const rows = [];
    for (let i = 0; i < boardSize; i++) {
      const squaresInRow = [];
      for (let j = 0; j < boardSize; j++) {
        squaresInRow.push(renderSquare(i * boardSize + j));  
      }
      rows.push(
        <div key={i} className="board-row">
          {squaresInRow}
        </div>
      );
    }
    return rows;
  };

  // Giao di·ªán ch√≠nh
  return (
    <div className="game">
      <h1 className="game-title">C·ªù Ca-ro(Tic-Tac-Toe)</h1>

      {/* M√†n h√¨nh thi·∫øt l·∫≠p tr√≤ ch∆°i */}
      {!gameStarted ? (
        <div className="game-setup">
          <h2>C√†i ƒë·∫∑t</h2>
          <div className="player-names">
            <label>
              T√™n ng∆∞·ªùi ch∆°i A (X):
              <input
                type="text"
                value={playerA}
                onChange={(e) => setPlayerA(e.target.value)}
              />
            </label>
            <label>
              T√™n ng∆∞·ªùi ch∆°i B (O):
              <input
                type="text"
                value={playerB}
                onChange={(e) => setPlayerB(e.target.value)}
              />
            </label>
          </div>

          {/* Ch·ªçn k√≠ch th∆∞·ªõc b√†n c·ªù */}
          <div className="board-size">
            <h3>Ch·ªçn size:</h3>
            <div className="size-options">
              <button
                className={boardSize === 3 ? "active" : ""}
                onClick={() => changeBoardSize(3)}
              >
                3x3
              </button>
              <button
                className={boardSize === 4 ? "active" : ""}
                onClick={() => changeBoardSize(4)}
              >
                4x4
              </button>
              <button
                className={boardSize === 5 ? "active" : ""}
                onClick={() => changeBoardSize(5)}
              >
                5x5
              </button>
              <button
                className={boardSize === 7 ? "active" : ""}
                onClick={() => changeBoardSize(7)}
              >
                7x7
              </button>
            </div>
          </div>

          {/* N√∫t b·∫Øt ƒë·∫ßu */}
          <button onClick={startGame} className="start-button">
            B·∫Øt ƒë·∫ßu
          </button>
        </div>
      ) : (
        <>
          {/* M√†n h√¨nh ch∆°i game */}
          <div className="game-info">
            <div className="status">{status}</div>
            <div className="players">
              <span className={`player ${xIsNext ? "active" : ""}`}>
                {playerA}: X
              </span>
              <span className={`player ${!xIsNext ? "active" : ""}`}>
                {playerB}: O
              </span>
            </div>
          </div>

          {/* B√†n c·ªù */}
          <div className={`board board-${boardSize}`}>{renderBoard()}</div>

          {/* N√∫t ƒëi·ªÅu khi·ªÉn */}
          <div className="game-controls">
            <button onClick={resetGame} className="reset">
              Ch∆°i l·∫°i
            </button>
            <button
              onClick={() => {
                setGameStarted(false); // Tr·ªü l·∫°i m√†n thi·∫øt l·∫≠p
                setBoard(Array(boardSize * boardSize).fill(null));
              }}
              className="change-settings"
            >
              Tr·ªü l·∫°i
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default TicTacToe; 


